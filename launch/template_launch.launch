<!-- Every launch file starts with this command -->
<launch> 

    <!-- Include helps you launch other launch files within this launch file-->
        <!-- For file tag, mention the gazebo_ros empty world's launch file -->
        <!-- For the arg name, give any name of your choice to this world -->
        <!-- for the value tag, provide the path to the world file that you downloaded -->
	<include file= "$(find gazebo_ros)/launch/empty_world.launch"> 
		<arg name="world_name" value="$(find vanda1)/launch/competition_arena.world"/> 
	</include>



    <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->

<!--     <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="worlds/mud.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
    </include> -->
		

        <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	<param name= "robot_description" command="$(find xacro)/xacro --inorder $(find vanda1)/urdf/my_robot_integration.urdf.xacro " />
    <!-- Add in your robot name in the value tag -->
    <param name = "robot_name" value="vanda1robot"/> 
	<arg name ="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>

    <!--is robot_name supposed to be changed? or just the value tag?-->
    





    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->

<!--     Mack Tang 2020: found answer online regarding namespace ns, did not work, unsure if simple_car was supposed to be changed to click_robot. -->
<!-- link to answer: https://answers.ros.org/question/327802/could-not-load-controller-joint_state_controller-because-controller-type-joint_state_controllerjointstatecontroller-does-not-exist/ -->

	<!-- <rosparam file="/home/penitenttangent/catkin_ws/src/click_urdf/config/config_controllers.yaml" command="load" ns="/simple_car"/> -->



    <!--This is closest to the original instructions-->
    <!-- <rosparam file="/home/penitenttangent/catkin_ws/src/click_urdf/config/config_controllers.yaml" command="load"/> -->

    <!-- Simpler file path, file was moved so other uncommented code lines may not work-->
    <rosparam file="$(find vanda1)/launch/config_controllers.yaml" command="load" />


    <!--A more general file scheme? not sure if this works-->
    <!-- <rosparam file="$(find click_urdf)/config/config_controllers.yaml" command="load"/> -->








	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>


    <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" /> -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" /> 



    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spwaner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/vanda1robot" args="joint_state_controller
        rear_c
        axle_L_c
        wheel_L_c
        axle_R_c
        wheel_R_c" />    


    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model vanda1robot"
		output="screen"/>


	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


</launch>